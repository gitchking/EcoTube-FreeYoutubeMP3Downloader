#!/usr/bin/env node

/**
 * Complete Render Deployment for EcoTube YouTube Converter
 * Repository: https://github.com/gitchking/EcoTube-FreeYoutubeMP3Downloader.git
 */

import { execSync } from 'child_process';
import fs from 'fs';

console.log('üöÄ Complete Render Deployment - EcoTube YouTube Converter');
console.log('========================================================');

// Exact configuration from your project memory
const deployConfig = {
  repository: 'https://github.com/gitchking/EcoTube-FreeYoutubeMP3Downloader.git',
  repoShort: 'gitchking/EcoTube-FreeYoutubeMP3Downloader',
  serviceName: 'ecotube-youtube-converter',
  region: 'ohio',
  runtime: 'Node',
  plan: 'Free',
  branch: 'main',
  buildCommand: 'npm run build',
  startCommand: 'npm start',
  environment: {
    NODE_ENV: 'production',
    SESSION_SECRET: '3de70493a7e6bce835dddfe7c67b6e2e61f5ab291661f409e1eaa8222d0d7f3f',
    PORT: '5000'
  }
};

function logStep(step, message) {
  console.log(`\n${step} ${message}`);
}

function logSuccess(message) {
  console.log(`‚úÖ ${message}`);
}

function logError(message) {
  console.log(`‚ùå ${message}`);
}

function logInfo(message) {
  console.log(`‚ÑπÔ∏è  ${message}`);
}

async function openRenderDeployment() {
  logStep('üåê', 'Opening Render Deployment Interface...');
  
  // Open three different methods to ensure deployment happens
  const urls = [
    // Method 1: Blueprint with pre-filled repo
    `https://dashboard.render.com/blueprints/new?repo=${encodeURIComponent(deployConfig.repository)}`,
    // Method 2: Direct web service creation
    `https://dashboard.render.com/create/web`,
    // Method 3: Main dashboard
    `https://dashboard.render.com`
  ];
  
  logInfo('Opening multiple deployment options...');
  
  for (let i = 0; i < urls.length; i++) {
    try {
      if (process.platform === 'win32') {
        execSync(`start "" "${urls[i]}"`);
      } else if (process.platform === 'darwin') {
        execSync(`open "${urls[i]}"`);
      } else {
        execSync(`xdg-open "${urls[i]}"`);
      }
      logSuccess(`Opened deployment option ${i + 1}`);
    } catch (error) {
      logError(`Failed to open option ${i + 1}: ${urls[i]}`);
    }
  }
  
  return true;
}

async function displayExactDeploymentSteps() {
  logStep('üìã', 'EXACT DEPLOYMENT STEPS - FOLLOW THESE NOW:');
  
  console.log(`
üéØ **METHOD 1: Blueprint Deployment (Recommended)**

1. üîê **Login to Render Dashboard**
   ‚Ä¢ Should be open: https://dashboard.render.com/blueprints/new
   ‚Ä¢ Login with GitHub if not already logged in

2. üîó **Repository Connection**
   ‚Ä¢ Repository field should show: ${deployConfig.repository}
   ‚Ä¢ If empty, paste: ${deployConfig.repoShort}
   ‚Ä¢ Click "Connect Repository"

3. üìÑ **Blueprint Detection**
   ‚Ä¢ Render will find your render.yaml file
   ‚Ä¢ Message: "Blueprint found - 1 service will be created"
   ‚Ä¢ All settings will auto-populate from render.yaml

4. ‚úÖ **Verify Auto-Configuration**
   ‚Ä¢ Service Name: ${deployConfig.serviceName}
   ‚Ä¢ Region: ${deployConfig.region}
   ‚Ä¢ Plan: ${deployConfig.plan}
   ‚Ä¢ Build Command: npm ci && npm run build
   ‚Ä¢ Start Command: npm start
   ‚Ä¢ Environment Variables: NODE_ENV, SESSION_SECRET, PORT

5. üöÄ **Deploy Now**
   ‚Ä¢ Click "Apply Blueprint" button
   ‚Ä¢ Deployment starts immediately
   ‚Ä¢ Build logs will appear in real-time

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ **METHOD 2: Manual Web Service (If Blueprint Fails)**

1. üåê **Create Web Service**
   ‚Ä¢ Go to: https://dashboard.render.com/create/web
   ‚Ä¢ Connect GitHub repository: ${deployConfig.repoShort}

2. ‚öôÔ∏è  **Manual Configuration**
   ‚Ä¢ Name: ${deployConfig.serviceName}
   ‚Ä¢ Region: ${deployConfig.region} (US East)
   ‚Ä¢ Branch: ${deployConfig.branch}
   ‚Ä¢ Runtime: ${deployConfig.runtime}
   ‚Ä¢ Build Command: ${deployConfig.buildCommand}
   ‚Ä¢ Start Command: ${deployConfig.startCommand}

3. üîí **Environment Variables**
   Add these three variables:
   ‚Ä¢ NODE_ENV = ${deployConfig.environment.NODE_ENV}
   ‚Ä¢ SESSION_SECRET = ${deployConfig.environment.SESSION_SECRET}
   ‚Ä¢ PORT = ${deployConfig.environment.PORT}

4. üí∞ **Plan Selection**
   ‚Ä¢ Select: ${deployConfig.plan} plan
   ‚Ä¢ 750 hours/month included

5. üöÄ **Create Service**
   ‚Ä¢ Click "Create Web Service"
   ‚Ä¢ Build will start automatically

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ **DEPLOYMENT MONITORING**

1. ‚è±Ô∏è  **Build Progress** (3-5 minutes)
   ‚Ä¢ Install dependencies (npm ci)
   ‚Ä¢ Build frontend (vite build)
   ‚Ä¢ Build backend (esbuild)
   ‚Ä¢ Install system dependencies (FFmpeg, yt-dlp)

2. üéâ **Live URL**
   ‚Ä¢ Service URL: https://${deployConfig.serviceName}.onrender.com
   ‚Ä¢ Dashboard: https://dashboard.render.com/web/${deployConfig.serviceName}

3. ‚úÖ **Verify Deployment**
   ‚Ä¢ Homepage loads with YouTube converter interface
   ‚Ä¢ Dark mode enabled by default
   ‚Ä¢ Try converting a short YouTube video
   ‚Ä¢ Download functionality works

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üî• **FEATURES INCLUDED IN YOUR DEPLOYMENT**

‚úÖ YouTube to MP3 Conversion
‚úÖ FFmpeg Audio Processing
‚úÖ yt-dlp YouTube Downloader
‚úÖ React Frontend with Vite
‚úÖ Express.js Backend
‚úÖ Dark Mode Interface
‚úÖ Mobile Responsive Design
‚úÖ Error Handling & Retries
‚úÖ Auto-SSL Certificate (HTTPS)
‚úÖ Auto-Deploy on Git Push

üí° **Troubleshooting**
‚Ä¢ Build fails? Check build logs in Render dashboard
‚Ä¢ Service won't start? Verify start command: npm start
‚Ä¢ Conversion fails? Check FFmpeg/yt-dlp in logs
‚Ä¢ Contact support: https://render.com/docs/support
`);
}

async function waitForUserConfirmation() {
  logStep('‚è∞', 'Deployment Status Check');
  
  console.log(`
üéØ **DEPLOYMENT STATUS CHECKLIST**

Please confirm each step as you complete it:

‚ñ° 1. Opened Render Dashboard
‚ñ° 2. Connected GitHub repository: ${deployConfig.repoShort}
‚ñ° 3. Verified configuration (auto-filled from render.yaml)
‚ñ° 4. Clicked "Apply Blueprint" or "Create Web Service"
‚ñ° 5. Build started (you can see build logs)
‚ñ° 6. Build completed successfully
‚ñ° 7. Service is running (green status)
‚ñ° 8. URL is accessible: https://${deployConfig.serviceName}.onrender.com

üö® **IMPORTANT**: Actually click the deploy button in Render dashboard!

After deployment completes, your YouTube converter will be live with:
‚Ä¢ Full conversion functionality
‚Ä¢ Production-ready configuration
‚Ä¢ Auto-scaling capabilities
‚Ä¢ 99.9% uptime SLA
`);
}

async function main() {
  try {
    logStep('üìä', 'Deployment Configuration Summary:');
    console.log(`   Repository: ${deployConfig.repository}`);
    console.log(`   Service: ${deployConfig.serviceName}`);
    console.log(`   Region: ${deployConfig.region}`);
    console.log(`   Plan: ${deployConfig.plan}`);
    
    // Open deployment interfaces
    await openRenderDeployment();
    
    // Display exact steps
    await displayExactDeploymentSteps();
    
    // Wait for confirmation
    await waitForUserConfirmation();
    
    logStep('üéâ', 'Deployment Process Initiated!');
    logSuccess('Complete the steps above to deploy your YouTube converter');
    logInfo('Your app will be live at: https://ecotube-youtube-converter.onrender.com');
    
  } catch (error) {
    logError(`Deployment initiation failed: ${error.message}`);
    console.log(`\nManual fallback: https://dashboard.render.com`);
    process.exit(1);
  }
}

main();